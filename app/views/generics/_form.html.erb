<%= form_for @generic, :html => { :multipart => true } do |f| %>
  <input type="hidden" name="step" value="<%= @step_instance[:id] %>">
  <div class="row">
    <div class="col-md-12">
      <div id="form-holder">


      </div>
    </div>
  </div>

  <div class="space-12"></div>
  <div class="row">
    <div class="col-md-12">
      <div class="actions">
        <%= f.submit 'Submit Form', :class => 'btn btn-primary' %>
        <%= link_to 'Back', generics_path, :class => 'btn btn-default' %>
      </div>
    </div>
  </div>
<% end %>

<script>

  function addColumns(count) {
    for(var i = 0, col = parseInt(12/count); i < count; i++) {
      var attributes = {id: "column"+(i+1), class: "col-md-"+col};
      $("#form-holder").append($("<div />", attributes));
    }
  }

  function appendSpace(_parent, count) {
    _parent.append($("<div />", {class: "space-"+count}));
  }

  function buildForm() {
    console.log("buildForm")
    form_config = gon.form_config;
    var columns = Object.keys(form_config.fields).length
    addColumns(columns);

    for(var column in form_config.fields) {
      var _parent = $("#"+column);
      for(var modelKey in form_config.fields[column]) {
        var label = form_config.labels[modelKey];
        var yamlConfig = form_config.fields[column][modelKey];
        var jsonHTML = buildHTMLFromYAML(modelKey, label, yamlConfig);
        initHTMLAppender(_parent, jsonHTML);
        appendSpace(_parent, 12);
      }
    }

    addAceFormEffects();
  }

  function buildHTMLFromYAML(modelKey, label, yamlConfig) {
    var htmlType = yamlConfig.html.tag + "_" + yamlConfig.html.type;
    var selectOptions = [];
    var radioOptions = [];

    if(yamlConfig.html.tag == 'select') {
      if(yamlConfig.html.model)
        selectOptions = getOptionsFromModel(yamlConfig.html.model, yamlConfig.html.modelValue);

      if(yamlConfig.html.array)
        selectOptions = getOptionsFromArray(yamlConfig.html.array);
    }

    if(yamlConfig.html.type == 'radio') {
      radioOptions = getRadioFromArray(yamlConfig.html.array, modelKey);
    }

    var defaultStructures = {
      'input_text': [
        {type: "<div />", attributes: {class:"row"}, children: [
          {type: "<div />", attributes: {class:"form-group"}, children: [
            {type: "<label />", attributes: {class: "col-md-"+yamlConfig.label.size+" control-label no-padding-left no-padding-right", html: label}},
            {type: "<input />", attributes: {class: "col-md-"+yamlConfig.html.size, placeholder: label, type: "text", name: "form["+modelKey+"]"}}
          ]}
        ]}
      ],
      'input_area': [
        {type: "<div />", attributes: {class:"row"}, children: [
          {type: "<div />", attributes: {class:"form-group"}, children: [
            {type: "<label />", attributes: {class: "col-md-"+yamlConfig.label.size+" control-label no-padding-left no-padding-right", html: label}},
            {type: "<textarea />", attributes: {class: "col-md-"+yamlConfig.html.size+" autosize-transition", placeholder: label, name: "form["+modelKey+"]", style: "overflow:hidden;word-wrap: break-word;resize:none"}}
          ]}
        ]}
      ],

      'input_password': [
        {type: "<div />", attributes: {class:"row"}, children: [
          {type: "<div />", attributes: {class:"form-group"}, children: [
            {type: "<label />", attributes: {class: "col-md-"+yamlConfig.label.size+" control-label no-padding-left no-padding-right", html: label}},
            {type: "<input />", attributes: {class: "col-md-"+yamlConfig.html.size, placeholder: label, type: "password", name: "form["+modelKey+"]"}}
          ]}
        ]}
      ],
      
      'input_date': [
        {type: "<div />", attributes: {class:"row"}, children: [
          {type: "<div />", attributes: {class:"form-group"}, children: [
            {type: "<label />", attributes: {class: "col-md-"+yamlConfig.label.size+" control-label no-padding-left no-padding-right", html: label}},
            {type: "<div />", attributes: {class: "col-md-"+yamlConfig.html.size+" input-group"}, children: [
              {type: "<input />", attributes: {class: "date-picker", placeholder: label, type: "text", name: "form["+modelKey+"]", style:"width:100%"}},
              {type: "<span />", attributes: {class:"input-group-addon"}, children:[
                {type: "<i />", attributes: {class:"fa fa-calendar bigger-110"}}
              ]}
            ]}
          ]}
        ]}
      ],
      
      'input_file': [
        {type: "<div />", attributes: {class:"row"}, children: [
          {type: "<div />", attributes: {class:"form-group"}, children: [
            {type: "<label />", attributes: {class: "col-md-"+yamlConfig.label.size+" control-label no-padding-left no-padding-right", html: label}},
            {type: "<div />", attributes: {class: "col-md-"+yamlConfig.html.size+" no-padding-right no-padding-left"}, children: [
              {type: "<input />", attributes: {class: "ace-file-input", type: "file", name: "files["+modelKey+"]"}}
            ]}
          ]}
        ]}
      ],

      'input_checkbox': [
        {type: "<div />", attributes: {class:"row"}, children: [
          {type: "<div />", attributes: {class:"form-group"}, children: [
            {type: "<label />", attributes: {class: "col-md-"+yamlConfig.label.size+" control-label no-padding-left no-padding-right", html: label}},
            {type: "<div />", attributes: {class: "col-md-"+yamlConfig.html.size+" no-padding-right no-padding-left"}, children: [
              {type: "<label />", attributes: {}, children: [
                {type: "<input />", attributes: {class: "ace ace-switch ace-switch-6", type: "checkbox", name: "form["+modelKey+"]"}},
                {type: "<span />", attributes: {class: "lbl"}}
              ]}
            ]}
          ]}
        ]}
      ],

      'input_radio': [
        {type: "<div />", attributes: {class:"row"}, children: [
          {type: "<div />", attributes: {class:"control-group"}, children: [
            {type: "<label />", attributes: {class: "col-md-"+yamlConfig.label.size+" control-label no-padding-left no-padding-right", html: label}},
            {type:"<div />", attributes: {class: "col-md-"+yamlConfig.html.size}, children: radioOptions}
          ]}
        ]}
      ],

      'select_single': [
        {type: "<div />", attributes: {class:"row"}, children: [
          {type: "<div />", attributes: {class:"form-group"}, children: [
            {type: "<label />", attributes: {class: "col-md-"+yamlConfig.label.size+" control-label no-padding-left no-padding-right", html: label}},
            {type: "<div />", attributes: {class: "col-md-"+yamlConfig.html.size+" no-padding-right no-padding-left"}, children: [
              {type: "<select />", attributes: {class: "chosen-select", name: "form["+modelKey+"]"}, children: selectOptions}
            ]}
          ]}
        ]}
      ],

      'select_multiple': [
        {type: "<div />", attributes: {class:"row"}, children: [
          {type: "<div />", attributes: {class:"form-group"}, children: [
            {type: "<label />", attributes: {class: "col-md-"+yamlConfig.label.size+" control-label no-padding-left no-padding-right", html: label}},
            {type: "<div />", attributes: {class: "col-md-"+yamlConfig.html.size+" no-padding-right no-padding-left"}, children: [
              {type: "<select />", attributes: {class: "chosen-select", multiple: "", name: "form["+modelKey+"]"}, children: selectOptions}
            ]}
          ]}
        ]}
      ]
    }

    return defaultStructures[htmlType]
  }

  function getOptionsFromModel(model, key) {
    var optionHtml = [];
    for(var i = 0, length = gon.model[model].length; i < length; i++) {
      if(key == '_id')
        optionHtml.push({type:"<option />", attributes:{html:gon.model[model][i].name, value: gon.model[model][i]['_id'].$oid }});
      else
        optionHtml.push({type:"<option />", attributes:{html:gon.model[model][i].name, value: gon.model[model][i][key] }});
    }
    return optionHtml;
  }

  function getOptionsFromArray(array) {
    var optionHtml = [];
    for(var i = 0, length = array.length; i < length; i++) {
      optionHtml.push({type:"<option />", attributes:{html: array[i], value: array[i] }});
    }
    return optionHtml;
  }

  function getRadioFromArray(array, modelKey) {
    var optionHtml = [];
    for(var i = 0, length = array.length; i < length; i++) {
      optionHtml.push(
        {type:"<option />", attributes:{class: "radio"}, children: [
          {type:"<label />", attributes: {}, children: [
            {type:"<input />", attributes: {class: "ace", type: "radio", name:"form["+ modelKey +"]"}},
            {type: "<span />", attributes: {class: "lbl", html: array[i]}}
          ]}
        ]}
      );
    }
    return optionHtml;
  }

  function addAceFormEffects() {
    $('.ace-file-input').ace_file_input({
      no_file:'No File ...',
      btn_choose:'Choose',
      btn_change:'Change',
      droppable:false,
      onchange:null,
      thumbnail:false
    }); 
    
    $('.chosen-select').chosen(); 
    $('.chosen-container').css('width','99.5%');
    $('.date-picker').datepicker({
      autoclose: true,
      todayHighlight: true
    })
    //show datepicker when clicking on the icon
    .next().on(ace.click_event, function(){
      $(this).prev().focus();
    });
    $('textarea[class*=autosize]').autosize({append: "\n"});
  }

  buildForm();

  console.log(gon);

  
    

</script>
